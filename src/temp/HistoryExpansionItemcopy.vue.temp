<template>
  <!-- <div
    class="q-pa-md"

  > -->
  <!-- <q-expansion-item
    class="q-pa-md"
    icon="history"
    label="Historico"
    header-class="bg-indigo-8 text-white"
    expand-icon-class="text-white"
  >
    <q-card>
      <q-card-section>
        <q-scroll-area
          visible
          style="height: 100px; max-width: 300px"
        >
          <q-card> sadasda </q-card>
        </q-scroll-area>
      </q-card-section>
    </q-card>
  </q-expansion-item> -->
  <!-- </div> -->

  <q-expansion-item
    icon="history"
    label="Histórico"
    header-class="bg-indigo-8 text-white"
    expand-icon-class="text-white"
  >
    <q-card class="bg-grey-2 text-indigo">
      <q-scroll-area
        visible
        style="height: 100px; max-width: 300px"
      >
        <q-card-section> {{ historyResultsValue }}</q-card-section>
      </q-scroll-area>
    </q-card>
  </q-expansion-item>
</template>

<script setup lang="ts">
  import { computed, defineEmits, defineProps, reactive, ref, Ref } from 'vue'
  import ActionsInputKeys from 'src/utils/ActionsInputKeys'
  import CardHistoryResult from './CardHistoryResult.vue'

  const historyResults = () => {
    const emit = defineEmits()
    const actionsInputKeys = new ActionsInputKeys()
    const historyResultsValue = actionsInputKeys.historyResults.value
    emit('update', historyResultsValue)
    return historyResultsValue
  }

  //   const emit = defineEmits('change:historyResults')
  //   const actionsInputKeys = new ActionsInputKeys()
  //   const historyResults = actionsInputKeys.historyResults.value

  //  const historyResults => {defineEmits(actionsInputKeys.historyResults.value)}
  // Faça algo com historyResultsValue, se necessário

  // Exemplo de emissão de um evento personalizado

  // //const props = defineProps<{ modelValue: Ref<String> }>()
  // //const emit = defineEmits(['update:historyResults'])

  // const expanded = ref(false)

  // const actionsInputKeys = new ActionsInputKeys()
  // const historyResults = computed(() => actionsInputKeys.historyResults.value)

  // const props = defineProps(['expanded']);
  // const emits = defineEmits(['enlarge-text']);
  // defineProps({
  //   vFor: {
  //     type: Array,
  //   },
  //   user: {
  //     type: Object,
  //     required: true,
  //   },
  // })

  // const actionsInputKeys = new ActionsInputKeys()
  // console.log(actionsInputKeys.historyResults.value)

  // const historyResults: Ref<string> = ref(actionsInputKeys.historyResults)
  // console.log('asdasdas', historyResults)

  // const props: Ref<string> = defineProps([historyResults: Ref<string>])

  // const historyResultsD = computed(() => {
  //    = actionsInputKeys.historyResults.value
  // }
</script>
