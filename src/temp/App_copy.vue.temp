<template>
  <!-- <div>
    <div class="row justify-center"> -->
      <div class="col-xs-12 col-sm-8 col-md-5 col-lg-4 col-xl-3">
        <q-card>
          <q-card-section class="bg-primary">
            <div class="row justify-center items-center">
              <div class="col text-white text-h6"> Calculadora </div>
              <div class="col text-white">
                <q-expansion-item icon="history" label="Histórico" header-class="bg-indigo-8 text-white"
                  expand-icon-class="text-white">
                  <q-card class="bg-grey-2 text-indigo">
                    <q-scroll-area visible style="height: 100px; max-width: 300px;">
                      <q-card-section v-for="(div, index) in historyResults" :key="index">
                        <div v-if="historyResults.length === 1 || index !== 0">
                          {{ historyResults[index] }}
                        </div>
                      </q-card-section>
                    </q-scroll-area>
                  </q-card>
                </q-expansion-item>
              </div>
            </div>
          </q-card-section>
          <q-card-section>
            <div class="text-h5 text-grey-6 text-right">
              {{ numericExpression + displaySentenceNumber }}
            </div>
            <div class="text-h3 text-right"> {{ displayResult }} </div>
          </q-card-section>
          <q-card-section class="bg-grey-4">
            <div class="row q-col-gutter-sm">
              <div class="col-3" v-for="(btn, index) in enumBtnKeysCalc" :key="index">
                <q-btn class="full-width text-h6" :color="checkerInput.notIsNumber(btn) ? 'indigo' : 'grey-2'"
                  :text-color="checkerInput.notIsNumber(btn) ? 'white' : 'grey-8'" @click="btnKeyinput(btn)">
                  {{ btn }}
                </q-btn>
              </div>
              <div class="col-6">
                <q-btn class="full-width text-h6" color="indigo" @click="btnClearDisplay">
                  CE
                </q-btn>
              </div>
              <div class="col-6">
                <q-btn class="full-width text-h6" color="orange" @click="btnResult">
                  =
                </q-btn>
              </div>
            </div>
          </q-card-section>
        </q-card>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">

import { ref } from 'vue'
import { evaluate } from 'mathjs'
import enumBtnKeysCalc from './utils/enumBtnKeysCalc'
import { CheckerInputBtn } from './utils/CheckersInput'
import { ActionsInputKeys } from './utils/ActionsInputKeys'

// variavel de junçao de string da expressao
type numericExpression = (number | string)
const numericExpression = ref('')

// variavel de entrada das keys da calculadora
type inputBtn = (number | string)
const inputBtn = ('')

// variaveis de exibicao de display

type displaySentenceNumber = (number | string)
type displayResult = string
type historyResults = string

// type notIsNumber = boolean

type operatorInputFlag = boolean
let operatorInputFlag = false

// metodos e classes
type checkerInput = string

const checkerInput = new CheckerInputBtn();
const displaySentenceNumber = ref('')
const displayResult = ref('0')
const historyResults = ref(['sem historico'])

//const notIsNumber = {checkerInput.notIsNumber(inputBtn)}

//const notIsNumber = (inputBtn: inputBtn) => isNaN(Number(inputBtn))

const btnKeyinput = (inputBtn: inputBtn) => {
  if (!checkerInput.notIsNumber(inputBtn)) {
    if (operatorInputFlag) {
      displaySentenceNumber.value = ''
      operatorInputFlag = false
    }
    displaySentenceNumber.value = `${displaySentenceNumber.value}${inputBtn}`
  }
  else {
    addOperation(inputBtn)
  }
}

const btnClearDisplay = () => {
  displaySentenceNumber.value = ''
  numericExpression.value = ''
  displayResult.value = '0'
  operatorInputFlag = true
}

const btnResult = () => {
  if (!operatorInputFlag) {
    displayResult.value = evaluate(numericExpression.value + displaySentenceNumber.value)
    historyResults.value.push(`${numericExpression.value} ${displaySentenceNumber.value} = ${displayResult.value}`)
    numericExpression.value = ''
    displaySentenceNumber.value = ''
  }
  else {
    displayResult.value = 'Error!'
  }
}

const addOperation = (value: inputBtn) => {
  if (value === '.') {
    if (displaySentenceNumber.value.indexOf('.') === -1) {
      displaySentenceNumber.value = `${displaySentenceNumber.value} ${value}`
    }
    return
  }
  if (value === '%') {
    if (displaySentenceNumber.value !== '') {
      displaySentenceNumber.value = `${parseFloat(displaySentenceNumber.value) / 100}`
    }
    return
  }
  addOperator(value)
}

const addOperator = (inputBtn: inputBtn) => {
  if (!operatorInputFlag) {
    numericExpression.value += `${displaySentenceNumber.value} ${inputBtn} `
    displaySentenceNumber.value = ''
    operatorInputFlag = true
  }
}

</script>

<style >
.text-h5 {
  height: 23px;
}

.text-h3 {
  height: 50px;
}

.row-title {
  padding: 5px;
  margin: 10px;
  font-size: 20px;
}

.div {
  padding: 2;
}
</style>
./utils/CheckersInput
